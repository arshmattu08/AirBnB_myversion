# -*- coding: utf-8 -*-
"""Parth DS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QtbsV_W0kJpdcr_qr4hjFGVeKTzPcl0T

# **What makes an AIRBNB listing successful?**

**Project Proposal** : Using this data, we hope to find what makes a successful AirBnB listing. We will
look towards our ratings and number of ratings as our indicator for success. So,
what makes a high rating? Does location and neighborhoods have a significant
effect on rating? Is there a specific amenity that contributes to high reviews? Does
price influence foot traffic through the AirBnB? We will analyze this by
comparing locations and neighborhoods against one another and seeing if certain
locations are viewed more favorably. We will also assess amenities to see if there
is a significant difference in listings that have and do not have certain amenities.
For now, we will focus on the locational data and try to identify what locations are
“hotspots”. We will do this using the neighborhood data to see if certain areas are
viewed and reviewed more favorably than others. We will also evaluate the prices
to see if there is a sweet spot in pricing that attracts more foot traffic. Later down
the line when we pick up skills in NLP we will turn attention to determining
specific amenities that contribute to favorable reviews.

**Mount Data in Drive**
"""

from google.colab import drive
drive.mount('/content/drive')

"""**To Check Existence of file**"""

import os
print(os.path.exists("/content/drive/My Drive/DS Project IU/Airbnb.csv"))

"""**To read a CSV file named "Airbnb.csv" from the specified Google Drive path and then provide summary statistics for the numerical columns in the resulting DataFrame.**"""

import pandas as pd

path = "/content/drive/My Drive/DS Project IU/Airbnb.csv"
df = pd.read_csv(path)
df.describe()

"""**Displaying first 5 rows of the dataset**



"""

df.head(5)

"""**To view a random sample of rows**"""

df.sample(10)

"""**We get important information about all the columns in the dataset**"""



import pandas as pd

path = "/content/drive/My Drive/DS Project IU/Airbnb.csv"
df = pd.read_csv(path)

df.describe()

df.columns

df.describe(include='all')

df.duplicated(keep=False)

"""No Duplicate Data"""

df[df.duplicated(keep=False)]

df[df['NEIGHBOUR OVERVIEW'].isna()]

df[df['Bathrooms'].isna()]

from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent="map_501", timeout=2)

"""To Geocode address of Brentwood, Austin Tx"""

location = geolocator.geocode("Brentwood, Austin TX")

location

print(location.address)
print(location.latitude, location.longitude)

"""Get Importance score"""

print(f"Importance: {location.raw['importance']}")

"""Get Multiple Possible Matches in the USA"""

possible_locations = geolocator.geocode("Brentwood, USA", exactly_one=False)

for location in possible_locations:
    print(location.address)
    print(location.latitude, location.longitude)
    print(f"Importance: {location.raw['importance']}")

location = geolocator.geocode("Brentwood, Austin")

print(location.address)
print(location.latitude, location.longitude)
print(f"Importance: {location.raw['importance']}")

def find_location(row):

    place = row['place']

    location = geolocator.geocode(place)

    if location != None:
        return location.address, location.latitude, location.longitude, location.raw['importance']
    else:
        return "Not Found", "Not Found", "Not Found", "Not Found"

import pandas as pd
from google.colab import drive
drive.mount('/content/drive')

# Then use the correct path to your file
path = '/content/drive/My Drive/DS Project IU/Airbnb.csv'

# Read the CSV file
airbnb_df = pd.read_csv(path)

airbnb_df

def find_location(row)
  airbnb_df[['address', 'lat', 'lon', 'importance']] = df.apply(find_location, axis="columns", result_type="expand")
  airbnb_df



"""Base Map for Brentwood"""

import folium

austin_map = folium.Map(location=[30.331 , -97.736], zoom_start=15)
austin_map

"""Mark "Cute & Cozy Central Austin House"
"""

austin_map = folium.Map(location=[30.3312641, -97.7364653], zoom_start=13)

icon = folium.Icon(color='red', icon='info-sign')
folium.Marker([30.3312641, -97.7364653], popup='Cute & Cozy house in Texas', icon=icon).add_to(austin_map)
austin_map

"""Trying to create markers for all the Airbnbs in Brentwood"""

def create_map_markers(row, map_name):
    folium.Marker(location=[row['Host Neighbourhood'], row['Austin,TX']], popup=row['place']).add_to(map_name)

found_brentwood_locations = df[df['Host Neighbourhood'] != "Not Found"]

brentwood_listings = df[df['Host Neighbourhood'].str.contains('Brentwood', case=False, na=False)]

import pandas as pd
from google.colab import drive
drive.mount('/content/drive')
path = '/content/drive/My Drive/DS Project IU/Airbnb.csv'
airbnb_df = pd.read_csv(path)

def create_map_markers(row, map_name):
    folium.Marker(location=[row['Host Location'], row['Host Neighbourhood']], popup=row['ID']).add_to(austin_map)

found_austin_locations = airbnb_df[airbnb_df['Host Neighbourhood'] != "Not Found"]

"""**Adding multiple markers in Austin, TX**"""

import folium
import pandas as pd

# Sample data (correct the spelling of 'Brentwood')
airbnb_df = pd.DataFrame({
    'ID': [1, 2, 3, 4],
    'Host Neighbourhood': ['Downtown', 'East Austin', 'South Congress', 'Brentwood'],  # Corrected spelling
    'Price': [100, 150, 120, 80]
})

# Dictionary mapping neighborhood names to coordinates (latitude, longitude)
neighbourhood_coordinates = {
    'Downtown': [30.2711, -97.7437],
    'East Austin': [30.2697, -97.7204],
    'South Congress': [30.2460, -97.7494],
    'Brentwood': [30.3312641, -97.7364653]  # Corrected spelling
}

# Add a 'Coordinates' column to the DataFrame using the dictionary
airbnb_df['Coordinates'] = airbnb_df['Host Neighbourhood'].map(neighbourhood_coordinates)

# Filter out rows where the mapping failed (i.e., None)
found_austin_neighbourhoods = airbnb_df[airbnb_df['Coordinates'].notnull()]

# Initialize Folium map centered around Austin, TX
austin_map = folium.Map(location=[30.2672, -97.7431], zoom_start=12)

# Define the function to create red map markers
def create_map_markers(row, map_name):
    folium.Marker(
        location=row['Coordinates'],
        popup=f"ID: {row['ID']}\nNeighbourhood: {row['Host Neighbourhood']}\nPrice: ${row['Price']}",
        icon=folium.Icon(color='red')  # Set marker color to red
    ).add_to(austin_map)

# Apply the function to add red markers to the map
found_austin_neighbourhoods.apply(create_map_markers, map_name=austin_map, axis='columns')

# Display the map
austin_map

print(found_austin_locations.columns)

"""Trying Data Visualization"""

import plotly.express as px
import pandas as pd

drive.mount('/content/drive')
path = '/content/drive/My Drive/DS Project IU/Airbnb.csv'
airbnb_df = pd.read_csv(path)

airbnb_df.head()

"""Scatter plot for Price v/s Review

"""

# Sort the DataFrame by 'Price' in ascending order
#airbnb_df_sorted = airbnb_df.sort_values(by='Price', ascending=True)

fig = px.scatter(data_frame=airbnb_df,
                 x='Review Scores Rating',
                 y='Price',
                 title='Price vs Review Scores Rating',
                 hover_data=['Host Location', 'Host Neighbourhood']
                 )
fig.show()

"""Histogram"""

fig = px.histogram(airbnb_df,
                   x='Accommodates',
                   color='Property Type',

                   template='plotly_white',
                   color_discrete_sequence=px.colors.qualitative.D3
                  )

fig.update_layout(
    bargap=0.01,  # gap between bars of adjacent location coordinates
)

fig.show()

"""**Correlation heatmap**"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

drive.mount('/content/drive')
path = '/content/drive/My Drive/DS Project IU/Airbnb.csv'
airbnb_df = pd.read_csv(path)

# Clean and convert the 'Price' column to a numeric format
airbnb_df['Price'] = airbnb_df['Price'].replace('[\$,]', '', regex=True).astype(float)


numeric_columns = airbnb_df[['Accommodates', 'Bathrooms', 'Bedrooms', 'Beds', 'Price',
                               'Number of Reviews', 'Review Scores Rating']]

# Drop rows with any missing values in these columns
numeric_columns = numeric_columns.dropna()

# Matrix
correlation_matrix = numeric_columns.corr()

# Correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", square=True, cbar_kws={"shrink": 0.5})
plt.title("Correlation Heatmap of Numeric Airbnb Features")
plt.show()

